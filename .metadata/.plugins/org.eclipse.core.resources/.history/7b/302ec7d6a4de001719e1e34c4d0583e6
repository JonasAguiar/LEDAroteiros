package adt.hashtable.open;

import adt.hashtable.hashfunction.HashFunction;
import adt.hashtable.hashfunction.HashFunctionClosedAddressMethod;
import adt.hashtable.hashfunction.HashFunctionQuadraticProbing;

public class HashtableOpenAddressQuadraticProbingImpl<T extends Storable>
		extends AbstractHashtableOpenAddress<T> {

	public HashtableOpenAddressQuadraticProbingImpl(int size,
			HashFunctionClosedAddressMethod method, int c1, int c2) {
		super(size);
		hashFunction = new HashFunctionQuadraticProbing<T>(size, method, c1, c2);
		this.initiateInternalTable(size);
	}

	@Override
	public void insert(T element) {
		
		if (super.isFull()) {
	         throw new HashtableOverflowException();
	      }
	      if (element != null && this.search(element) == null) {
	         int probe = 0;
	         int hashCode = this.getHash(element, probe);

	         while (this.getElement(hashCode) != null && !this.getElement(hashCode).equals(deletedElement)
	               && probe != super.table.length) {
	            super.COLLISIONS++;
	            probe++;
	            hashCode = this.getHash(element, probe);
	         }
	         super.table[hashCode] = element;
	         super.elements++;
	      }

	   }

	   private int getHash(T element, int probe) {
	      HashFunction<T> hashFuncion = super.getHashFunction();
	      int hashCode = ((HashFunctionQuadraticProbing<T>) hashFuncion).hash(element, probe);
	      return hashCode;
	   }

	   @Override
	   public void remove(T element) {
		   
	      if (element != null && this.search(element) != null) {
	         int index = this.indexOf(element);
	         this.takeCollisions(element);
	         super.table[index] = new DELETED();
	         super.elements--;
	      }
	   }

	   private void takeCollisions(T element) {
		   
	      int probe = 0;
	      int hashCode = this.getHash(element, probe);
	      while (this.getElement(hashCode) != null && !this.getElement(hashCode).equals(deletedElement)
	            && probe != super.table.length) {
	         super.COLLISIONS--;
	         probe++;
	         hashCode = this.getHash(element, probe);
	      }
	   }

	   @Override
	   public T search(T element) {
	      T elementoDeRetorno = null;
	      int index = this.indexOf(element);

	      if (element != null && index != -1) {
	         elementoDeRetorno = (T) this.getElement(index);
	      }

	      return elementoDeRetorno;
	   }

	   @Override
	   public int indexOf(T element) {
		   
	      int indice = -1;
	      if (element != null) {
	         int probe = 0;
	         indice = this.getHash(element, probe);
	         while (this.getElement(indice) != null && !this.getElement(indice).equals(element)
	               && probe != super.table.length) {
	            probe++;
	            indice = this.getHash(element, probe);
	         }
	         if ((this.getElement(indice) == null)
	               || (this.getElement(indice) != null && !this.getElement(indice).equals(element))) {
	            indice = -1;
	         }
	      }
	      return indice;
	   }

	   @SuppressWarnings("unchecked")
	   private T getElement(int index) {
	      return (T) super.table[index];
	   }
}
